                                        CONTACT MANAGEMENT SYSTEM
                                        -------------------------

           1.Create a new project - ng new contact-app
           2.Run the new project -  ng serve --open
           3.Clear the code in app.component.html
           4.Install 3rd party libraies - boostrap,google fonts,Fontawesome          
              -->Install bootstrap - npm i bootstrap
                -->configure bootstrap -
                In angular.json
                  "styles": [
                            "src/styles.css",
                            "node_modules/bootstrap/dist/css/bootstrap.min.css"
                            ],
                  "scripts": [
                            "node_modules/bootstrap/dist/js/bootstrap.bundle.js"
                             ]
                In index.html
                  <---bootstrap--->
                          <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"
                           integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
                          <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
                           integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz"
                            crossorigin="anonymous"></script>             
              -->Install Fontawesome
                - npm install --save @fortawesome/fontawesome-free               
                - <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" 
                  integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw==" 
                  crossorigin="anonymous" referrerpolicy="no-referrer" />
                - use google fonts  
           5.Create html page or components 
                - contact manager - view all contact - ng g c ContactManager   
                - Add Contact - add new contacts - ng g c addContacts
                - view Contact - view particular contact - ng g c viewContact
                - Edit Contact - edit specific contact - ng g c editContact 
           6.Setup path  for each component - Routing 
                       localhost:4200 --> localhost:4200/ContactManager
                    inside app-routing.module.js        
                  /localhost:4200/contactManager
                  {
                   path:'',redirectTo:'contactManager',pathMatch:'full'
                  },
                  //lisiting all contacts details
                  {
                   path:'contactManager',component:ContactManagerComponent
                  },
           7.<router-outlet></router-outlet>
             -page to view requested components  
           8.Design full pages

           9.API INTERGRATION

                  To fetch data and display

                  -->Create a server folder
                  -->Inside it,Create db.json file
                  -->Goto jsonplaceholder - my json data -content  


                  -->Create a package.json file - npm init
                  Update package.json as
                  -->"start": "json-server --watch db.json --port 3000"

                  -->Install npm i json-server
                  
                  -->Run background - npm start
           10.Create Model 
                 - Create a model folder in src folder
                 - Inside in it, Create myContact.ts file and myGroup.ts file
           11.Asynchronous Resolving
                  JS                   TS      
                promise             Observable(rxjs - creative extention javascript)library

                .then()            .subscribe()
                .catch()           .catch()

                display all Contact information API
                view all contact information API
                Update all contact information API
                delete all contact information API 
           12.Create Services
             SERVICES - Pass data from one component to another component
                         If different components share the same data then-
                         we use to create a Service
              ng g s service-name -> ng g s services/api

           13.to Get http methods for api fetching    
                
                -Import HttpClientModule in app.module.ts

                Import (HttpClientModule) from '@angular/common/http';

                import[
                  HttpClientModule
                ]
           14.Dependency Injection
              Data share between two dependent classes
              -It perform inside the constructor
              constructor -> Is a special member fuction
                          -> It executed first in the classes

             syntax for DI -> constructor(access-specifier variable-name : class-name){}             
           15.ngOnInit
               ->It is a lifecycle hook
               ->starting stage of a component creation
           16.Data binding  - Data sharing inside a component(ts,html)

                1.one way data binding (ts->html or html to ts)

                         i)component view (ts->html) 
                           1)string interpolation - {{variablr-name}}{inside in html}
                           2)Property binding -[attribute-name] = "Property-name"

                        ii)view to component(html->ts)
                           1)Event binding - (event-name)="fuction-name"

                            Events

                           ->events are "thing" that happen to HTML element.  
                           ->An HTML web page has finished loading
                           ->An HTML input field was change
                           ->An HTML button has clicked
                           ->onchange An HTML element has been changed
                           ->onclick The user an HTML element

                           2)Event binding
                           ->$event is used in fuction argument
                           ->(event-name)="fuction-name($event)(html)
                           ->function-name(event) (ts)
                2.Two way Data Binding   
                        ->ngModel - [(ngModel)]="property-name"
                              ->ngModel import in app.module.ts - FormsModule
                              ->Create a FormControl instance from a domain model 
                                and binds it to a form control element.
                              ->Add this into input tag also put name attribute in it         

           17.Directives - To Manipulate DOM  
                   1)component Directives 
                   2)Structrual Directives

                   ->*ngIf="condition"
                   ->*ngFor="let var-name of array-name"
           18.ActivatedRoute(CLASS)
                 Provides access to information about a route associated with a component
                 that is loaded in an outlet. Use to traverse the RouterState tree and extract 
                 information from nodes.   

                 ->Parameters
                   -params : An Observable of the matrix Parameters scoped to this route.
           19. Transforming Data Using Pipes
                  ->Pipes are simple fuctions to use in template expressions
                     to accept an input value and retrun a transformed value
                  ->Angular provides built-in pipes for typical data transformations,
                     including transformations for internationalization (i18n), which 
                     use locale information to format data   
                     eg:-Datepipe


                  ->Create a pipe - ng g p pipes/filter

                        
